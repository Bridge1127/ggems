--------------------------------------------------------------------------------
- Gestion des verboses:
  * 0 Print demandé et info indispensable
  * 1 Infos plus détaillées
  * 2 Infos détaillées des résultats avec détails
  * 3 Entrées et sorties des constructeurs, destructeurs et fonctions
--------------------------------------------------------------------------------

- Améliorer le random Poisson et Gauss ?

- Faire un installer pratique pour Windows, MAC et Linux

- Faire la visu avec Qt (Qt Quick) et activer l'option Qt à partir du CMAKE. Si possible, faire la visualization sur carte graphique avec OpenCL

- Dessiner les particules :
  * Photon -> vert
  * Positron -> rouge
  * Electron -> bleu

- Documentation avec Sphinx + Doxygen + ou site .io avec doc

- Compilation des kernels OpenCL lors de l'installation

- Site internet GGEMS + mailing list

- Faire source indépendantes sans lancer la simulation complète -> phase space

- Controler les pointers shared, unique, weak et pointer cyclique, et comprendre pourquoi les destructeurs ne sont plus appelés dans GGEMS avec Python

- Traduire en C++ les benchmarks et exemples

- Licence pour GGEMS

- Généraliser le OpenCL manager à plusieurs contexts (pour la reconstruction CT plus tard)

- Enlever les singletons des membres privés

- Complétion automatique python

- Faire des exemples et benchmarks

- Faire une class singleton qui gère la mémoire RAM et diviser la gestion de la mémoire en section:
  * particules
  * navigateur : fantome + detecteur
  * source
  * etc...

- Faire diagramme avec Drawio pour clarifier code

- Destructeur Windows disparus ?

- Restructuration de GGEMSSolid, pour volumes voxelizés et analytiques