- Améliorer le random Poisson et Gauss ?

- Faire un installer pratique pour Windows, MAC et Linux

- Faire la visu avec Qt (Qt Quick) et activer l'option Qt à partir du CMAKE. Si possible, faire la visualization sur carte graphique avec OpenCL

- Dessiner les particules :
  * Photon -> vert
  * Positron -> rouge
  * Electron -> bleu

- Documentation avec Sphinx + Doxygen + LXR ou site .io avec doc

- Faire source indépendantes sans lancer la simulation complète -> phase space

- Généraliser le OpenCL manager à plusieurs contexts (pour la reconstruction CT plus tard)

- Complétion automatique python

- Faire des exemples et benchmarks

- Faire une class singleton qui gère la mémoire RAM et diviser la gestion de la mémoire en section:
  * particules
  * navigateur : fantome + detecteur
  * source
  * etc...

- Faire diagramme avec Drawio pour clarifier code

- Exemples et benchmark C++

- Vérifier l'indexation pour le cross section buffer, peut etre pb de int et short

- Enlever \version des fichiers

- Faire un GGEMSVoxelizedPhantom qui appelle le GGEMSVoxelizedNavigator (classe transparente à l'utilisateur)

- Banner GGEMS terminal

- Stop simulation si aucun navigateur détecté

- Controler le nom des navigateur dans le manager, si un nom identique --> ERROR

- Faire les Structure AABB et OBB distinctement dans le code

- Simplifier le module python

- Text en minuscule tous le temps

- Enlever warning sur le nombre de particles dans source

- Améliore le global et local work size et améliorer le local memory

- Faire un timer sur les kernels avec verbose activé ou désactivé

- Dans CT ajouter le gap angulaire