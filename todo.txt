- Améliorer le random Poisson et Gauss ?

- Faire un installer pratique pour Windows, MAC et Linux

- Faire la visu avec Qt (Qt Quick) et activer l'option Qt à partir du CMAKE. Si possible, faire la visualization sur carte graphique avec OpenCL

- Dessiner les particules :
  * Photon -> vert
  * Positron -> rouge
  * Electron -> bleu

- Documentation avec Sphinx + Doxygen + ou site .io avec doc

- Site internet GGEMS

- Faire source indépendantes sans lancer la simulation complète -> phase space

- Licence pour GGEMS

- Généraliser le OpenCL manager à plusieurs contexts (pour la reconstruction CT plus tard)

- Complétion automatique python

- Faire des exemples et benchmarks

- Faire une class singleton qui gère la mémoire RAM et diviser la gestion de la mémoire en section:
  * particules
  * navigateur : fantome + detecteur
  * source
  * etc...

- Faire diagramme avec Drawio pour clarifier code

- Dans Benchmark 0, optimiser les accès mémoire GPU <-> CPU, faire une copie de 'particle_cross_sections_' sur la RAM à la fin de la méthode GGEMSCrossSections::Initialize
Gain de temps de calcul pour python

- Exemples et benchmark C++

- Rendre plus propre les fichiers *.hh constant opencl <-> cpu

- Faire tracking particle en preprocessor

- Tjs dans le preprocessor, faire un GGEMS FAST UNSAFE pour la navigation

- Gitlab RENATER