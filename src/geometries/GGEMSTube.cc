/*!
  \file GGEMSTube.cc

  \brief Class GGEMSTube inheriting from GGEMSVolumeSolid handling Tube solid

  \author Julien BERT <julien.bert@univ-brest.fr>
  \author Didier BENOIT <didier.benoit@inserm.fr>
  \author LaTIM, INSERM - U1101, Brest, FRANCE
  \version 1.0
  \date Monday January 13, 2020
*/

#include "GGEMS/tools/GGEMSPrint.hh"
#include "GGEMS/geometries/GGEMSTube.hh"
#include "GGEMS/tools/GGEMSTools.hh"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSTube::GGEMSTube(void)
: GGEMSVolumeSolid(),
  height_(0.0),
  radius_(0.0)
{
  GGcout("GGEMSTube", "GGEMSTube", 3)
    << "Allocation of GGEMSTube..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSTube::~GGEMSTube()
{
  GGcout("GGEMSTube", "~GGEMSTube", 3)
    << "Deallocation of GGEMSTube..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSTube::SetHeight(GGdouble const& height)
{
  height_ = height;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSTube::SetRadius(GGdouble const& radius)
{
  radius_ = radius;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSTube::CheckParameters(void) const
{
  GGcout("GGEMSTube", "CheckParameters", 3)
    << "Checking mandatory parameters..." << GGendl;

  // Checking radius
  if (GGEMSMisc::IsEqual(radius_, 0.0)) {
    GGEMSMisc::ThrowException("GGEMSTube", "CheckParameters",
      "The tube radius has to be > 0!!!");
  }

  // Checking height
  if (GGEMSMisc::IsEqual(height_, 0.0)) {
    GGEMSMisc::ThrowException("GGEMSTube", "CheckParameters",
      "The tube height has to be > 0!!!");
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSTube::Initialize(void)
{
  GGcout("GGEMSTube", "Initialize", 3)
    << "Initializing GGEMSTube solid volume..." << GGendl;

  // Check mandatory parameters
  CheckParameters();

  // Getting the path to kernel
  std::string const kOpenCLKernelPath = OPENCL_KERNEL_PATH;
  std::string const kFilename = kOpenCLKernelPath
    + "/DrawGGEMSTube.cl";

  // Compiling the kernel
  p_kernel_draw_solid_ = opencl_manager_.CompileKernel(kFilename,
    "draw_ggems_tube");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSTube::Draw(void)
{
  GGcout("GGEMSTube", "Draw", 3) << "Drawing Tube..." << GGendl;

  // Get command queue and event
  cl::CommandQueue* p_queue = opencl_manager_.GetCommandQueue();
  cl::Event* p_event = opencl_manager_.GetEvent();

  // Get parameters from phantom creator
  GGdouble3 const kVoxelSizes = phantom_creator_manager_.GetElementsSizes();
  GGuint3 const kPhantomDimensions =
    phantom_creator_manager_.GetPhantomDimensions();
  GGulong const kNumberThreads = phantom_creator_manager_.GetNumberElements();
  cl::Buffer* p_voxelized_phantom =
    phantom_creator_manager_.GetVoxelizedPhantom();

  // Set parameters for kernel
  p_kernel_draw_solid_->setArg(0, kVoxelSizes);
  p_kernel_draw_solid_->setArg(1, kPhantomDimensions);
  p_kernel_draw_solid_->setArg(2, positions_);
  p_kernel_draw_solid_->setArg(3, label_value_);
  p_kernel_draw_solid_->setArg(4, height_);
  p_kernel_draw_solid_->setArg(5, radius_);
  p_kernel_draw_solid_->setArg(6, *p_voxelized_phantom);

  // Define the number of work-item to launch
  cl::NDRange global(kNumberThreads);
  cl::NDRange offset(0);

  // Launching kernel
  cl_int kernel_status = p_queue->enqueueNDRangeKernel(*p_kernel_draw_solid_,
    offset, global, cl::NullRange, nullptr, p_event);
  opencl_manager_.CheckOpenCLError(kernel_status, "GGEMSTube", "Draw Tube");
  p_queue->finish(); // Wait until the kernel status is finish

  // Displaying time in kernel
  opencl_manager_.DisplayElapsedTimeInKernel("Draw Tube");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSTube* create_tube(void)
{
  return new(std::nothrow) GGEMSTube;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void delete_tube(GGEMSTube* p_tube)
{
  if (p_tube) {
    delete p_tube;
    p_tube = nullptr;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_height_tube(GGEMSTube* p_tube, GGdouble const height)
{
  p_tube->SetHeight(height);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_radius_tube(GGEMSTube* p_tube, GGdouble const radius)
{
  p_tube->SetRadius(radius);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_position_tube(GGEMSTube* p_tube, GGdouble const pos_x,
  GGdouble const pos_y, GGdouble const pos_z)
{
  p_tube->SetPosition(pos_x, pos_y, pos_z);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_label_value_tube(GGEMSTube* p_tube, GGfloat const label_value)
{
  p_tube->SetLabelValue(label_value);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void initialize_tube(GGEMSTube* p_tube)
{
  p_tube->Initialize();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void draw_tube(GGEMSTube* p_tube)
{
  p_tube->Draw();
}
