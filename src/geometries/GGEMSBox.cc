/*!
  \file GGEMSBox.cc

  \brief Class GGEMSBox inheriting from GGEMSVolume handling Box solid

  \author Julien BERT <julien.bert@univ-brest.fr>
  \author Didier BENOIT <didier.benoit@inserm.fr>
  \author LaTIM, INSERM - U1101, Brest, FRANCE
  \version 1.0
  \date Monday August 31, 2020
*/

#include "GGEMS/geometries/GGEMSBox.hh"
#include "GGEMS/tools/GGEMSTools.hh"
#include "GGEMS/tools/GGEMSSystemOfUnits.hh"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSBox::GGEMSBox(void)
: GGEMSVolume(),
  height_(0.0f),
  width_(0.0f),
  depth_(0.0f)
{
  GGcout("GGEMSBox", "GGEMSBox", 3) << "Allocation of GGEMSBox..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSBox::~GGEMSBox(void)
{
  GGcout("GGEMSBox", "~GGEMSBox", 3) << "Deallocation of GGEMSBox..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::SetHeight(GGfloat const& height, char const* unit)
{
  height_ = GGEMSUnits::DistanceUnit(height, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::SetWidth(GGfloat const& width, char const* unit)
{
  width_ = GGEMSUnits::DistanceUnit(width, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::SetDepth(GGfloat const& depth, char const* unit)
{
  depth_ = GGEMSUnits::DistanceUnit(depth, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::CheckParameters(void) const
{
  GGcout("GGEMSBox", "CheckParameters", 3) << "Checking mandatory parameters..." << GGendl;

  // Checking height
  if (height_ == 0.0f) {
    GGEMSMisc::ThrowException("GGEMSBox", "CheckParameters", "The box height has to be > 0!!!");
  }

  // Checking width
  if (width_ == 0.0f) {
    GGEMSMisc::ThrowException("GGEMSBox", "CheckParameters", "The box width has to be > 0!!!");
  }

  // Checking depth
  if (depth_ == 0.0f) {
    GGEMSMisc::ThrowException("GGEMSBox", "CheckParameters", "The box depth has to be > 0!!!");
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::Initialize(void)
{
  GGcout("GGEMSBox", "Initialize", 3) << "Initializing GGEMSBox solid volume..." << GGendl;

  // Check mandatory parameters
  CheckParameters();

  // Getting the path to kernel
  std::string const kOpenCLKernelPath = OPENCL_KERNEL_PATH;
  std::string const kFilename = kOpenCLKernelPath + "/DrawGGEMSBox.cl";

  // Get the volume creator manager
  GGEMSVolumeCreatorManager& volume_creator_manager = GGEMSVolumeCreatorManager::GetInstance();

  // Get the OpenCL manager
  GGEMSOpenCLManager& opencl_manager = GGEMSOpenCLManager::GetInstance();

  // Get the data type and compiling kernel
  std::string const kDataType = "-D" + volume_creator_manager.GetDataType();
  kernel_draw_volume_cl_ = opencl_manager.CompileKernel(kFilename, "draw_ggems_box", nullptr, const_cast<char*>(kDataType.c_str()));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSBox::Draw(void)
{
  GGcout("GGEMSBox", "Draw", 3) << "Drawing Box..." << GGendl;

  // Get the OpenCL manager
  GGEMSOpenCLManager& opencl_manager = GGEMSOpenCLManager::GetInstance();

  // Get the volume creator manager
  GGEMSVolumeCreatorManager& volume_creator_manager = GGEMSVolumeCreatorManager::GetInstance();

  // Get command queue and event
  cl::CommandQueue* p_queue_cl = opencl_manager.GetCommandQueue();
  cl::Event* p_event_cl = opencl_manager.GetEvent();

  // Get parameters from phantom creator
  GGfloat3 const kVoxelSizes = volume_creator_manager.GetElementsSizes();
  GGuint3 const kPhantomDimensions = volume_creator_manager.GetVolumeDimensions();
  GGulong const kNumberThreads = volume_creator_manager.GetNumberElements();
  cl::Buffer* voxelized_phantom = volume_creator_manager.GetVoxelizedVolume();

  // Set parameters for kernel
  std::shared_ptr<cl::Kernel> kernel_cl = kernel_draw_volume_cl_.lock();
  kernel_cl->setArg(0, kVoxelSizes);
  kernel_cl->setArg(1, kPhantomDimensions);
  kernel_cl->setArg(2, positions_);
  kernel_cl->setArg(3, label_value_);
  kernel_cl->setArg(4, height_);
  kernel_cl->setArg(5, width_);
  kernel_cl->setArg(6, depth_);
  kernel_cl->setArg(7, *voxelized_phantom);

  // Define the number of work-item to launch
  cl::NDRange global(kNumberThreads);
  cl::NDRange offset(0);

  // Launching kernel
  cl_int kernel_status = p_queue_cl->enqueueNDRangeKernel(*kernel_cl, offset, global, cl::NullRange, nullptr, p_event_cl);
  opencl_manager.CheckOpenCLError(kernel_status, "GGEMSBox", "Draw Box");
  p_queue_cl->finish(); // Wait until the kernel status is finish

  // Displaying time in kernel
  opencl_manager.DisplayElapsedTimeInKernel("Draw Box");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSBox* create_box(void)
{
  return new(std::nothrow) GGEMSBox;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void delete_box(GGEMSBox* box)
{
  if (box) {
    delete box;
    box = nullptr;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_height_box(GGEMSBox* box, GGfloat const height, char const* unit)
{
  box->SetHeight(height, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_width_box(GGEMSBox* box, GGfloat const width, char const* unit)
{
  box->SetWidth(width, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_depth_box(GGEMSBox* box, GGfloat const depth, char const* unit)
{
  box->SetDepth(depth, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_position_box(GGEMSBox* box, GGfloat const pos_x, GGfloat const pos_y, GGfloat const pos_z, char const* unit)
{
  box->SetPosition(pos_x, pos_y, pos_z, unit);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_material_box(GGEMSBox* box, char const* material)
{
  box->SetMaterial(material);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_label_value_box(GGEMSBox* box, GGfloat const label_value)
{
  box->SetLabelValue(label_value);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void initialize_box(GGEMSBox* box)
{
  box->Initialize();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void draw_box(GGEMSBox* box)
{
  box->Draw();
}
