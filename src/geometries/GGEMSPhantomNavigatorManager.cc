/*!
  \file GGEMSPhantomNavigatorManager.cc

  \brief GGEMS class handling the phantom navigators in GGEMS

  \author Julien BERT <julien.bert@univ-brest.fr>
  \author Didier BENOIT <didier.benoit@inserm.fr>
  \author LaTIM, INSERM - U1101, Brest, FRANCE
  \version 1.0
  \date Tuesday February 11, 2020
*/

#include "GGEMS/geometries/GGEMSPhantomNavigator.hh"
#include "GGEMS/geometries/GGEMSPhantomNavigatorManager.hh"
#include "GGEMS/tools/GGEMSPrint.hh"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSPhantomNavigatorManager::GGEMSPhantomNavigatorManager(void)
: phantom_navigators_(0)
{
  GGcout("GGEMSPhantomNavigatorManager", "GGEMSPhantomNavigatorManager", 3) << "Allocation of GGEMS phantom navigator manager..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSPhantomNavigatorManager::~GGEMSPhantomNavigatorManager(void)
{
  // Freeing memory
  phantom_navigators_.clear();

  GGcout("GGEMSPhantomNavigatorManager", "~GGEMSPhantomNavigatorManager", 3) << "Deallocation of GGEMS phantom navigator manager..." << GGendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSPhantomNavigatorManager::Store(GGEMSPhantomNavigator* phantom_navigator)
{
  GGcout("GGEMSPhantomNavigatorManager", "Store", 3) << "Storing new phantom navigator in GGEMS..." << GGendl;
  phantom_navigators_.emplace_back(phantom_navigator);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void GGEMSPhantomNavigatorManager::PrintInfos(void) const
{
  GGcout("GGEMSPhantomNavigatorManager", "PrintInfos", 0) << "Printing infos about phantom navigators" << GGendl;
  GGcout("GGEMSPhantomNavigatorManager", "PrintInfos", 0) << "Number of phantom navigator(s): " << phantom_navigators_.size() << GGendl;

  // Printing infos about each navigator
  for (auto&&i : phantom_navigators_) i->PrintInfos();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

GGEMSPhantomNavigatorManager* get_instance_ggems_phantom_navigator_manager(void)
{
  return &GGEMSPhantomNavigatorManager::GetInstance();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void print_infos_ggems_phantom_navigator_manager(GGEMSPhantomNavigatorManager* phantom_navigator_manager)
{
  phantom_navigator_manager->PrintInfos();
}
