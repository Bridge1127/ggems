/*!
  \file xray_source.cc

  \brief This class define a XRay source in GGEMS useful for CT/CBCT simulation

  \author Julien BERT <julien.bert@univ-brest.fr>
  \author Didier BENOIT <didier.benoit@inserm.fr>
  \author LaTIM, INSERM - U1101, Brest, FRANCE
  \version 1.0
  \date Tuesday October 22, 2019
*/

#include "GGEMS/sources/xray_source.hh"
#include "GGEMS/tools/print.hh"
#include "GGEMS/global/ggems_constants.hh"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

XRaySource::XRaySource(void)
: GGEMSSourceManager()
{
  GGEMScout("XRaySource", "XRaySource", 1)
    << "Allocation of XRaySource..." << GGEMSendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

XRaySource::~XRaySource(void)
{
  GGEMScout("XRaySource", "~XRaySource", 1)
    << "Deallocation of XRaySource..." << GGEMSendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::GetPrimaries(cl::Buffer* p_primary_particles)
{
  if (p_primary_particles) std::cout << "Test" << std::endl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::PrintInfos(void) const
{
  GGEMScout("XRaySource", "PrintInfos", 0) << GGEMSendl;
  GGEMScout("XRaySource", "PrintInfos", 0) << "XRaySource Infos:" << GGEMSendl;
  GGEMScout("XRaySource", "PrintInfos", 0) << "-----------------" << GGEMSendl;
  GGEMScout("XRaySource", "PrintInfos", 0) << "*Particle type: ";
  if (particle_type_ == ParticleName::PHOTON) {
    std::cout << "Photon" << std::endl;
  }
  if (particle_type_ == ParticleName::ELECTRON) {
    std::cout << "Electron" << std::endl;
  }
  GGEMScout("XRaySource", "PrintInfos", 0) << "*Position: " << "(" << pos_.s[0]
    << ", " << pos_.s[1] << ", " << pos_.s[2] << " ) mm3" << GGEMSendl;
  GGEMScout("XRaySource", "PrintInfos", 0) << GGEMSendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::CheckParameters() const
{
  GGEMScout("XRaySource", "CheckParameters", 1)
    << "Checking the mandatory parameters..." << GGEMSendl;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::Initialize(void)
{
  // Check the mandatory parameters
  CheckParameters();

  // The source is initialized
  is_initialized_ = true;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::SetPosition(float const& pos_x, float const& pos_y,
  float const& pos_z)
{
  GGEMSSourceManager::SetPosition(pos_x, pos_y, pos_z);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void XRaySource::SetParticleType(char const* particle_type)
{
  GGEMSSourceManager::SetParticleType(particle_type);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

XRaySource* create_ggems_xray_source(void)
{
  return XRaySource::GetInstance();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void delete_ggems_xray_source(void)
{
  GGEMSSourceManager::DeleteInstance();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void initialize_xray_source(XRaySource* p_source_manager)
{
  p_source_manager->Initialize();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_position_xray_source(XRaySource* p_source_manager, float const pos_x,
  float const pos_y, float const pos_z)
{
  p_source_manager->SetPosition(pos_x, pos_y, pos_z);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void print_infos_xray_source(XRaySource* p_source_manager)
{
  p_source_manager->PrintInfos();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void set_particle_type_xray_source(XRaySource* p_source_manager,
  char const* particle_name)
{
  p_source_manager->SetParticleType(particle_name);
}
